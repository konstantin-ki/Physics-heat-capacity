class ClassBuzzer{constructor(_opt){if(this.name="ClassBuzzer",!(_opt instanceof ClassBuzzerType))throw new err(ClassBuzzer.ERROR_MSG_ARG_VALUE,ClassBuzzer.ERROR_CODE_ARG_VALUE);this._BuzPin=_opt._BuzPin}static get ERROR_CODE_ARG_VALUE(){return 10}static get ERROR_MSG_ARG_VALUE(){return`ERROR>> invalid data. ClassID: ${this.name}`}PlayBeep(_opt){if(!(_opt instanceof ClassBuzzerTypePlay))throw new ClassAppError(ClassBuzzer.ERROR_MSG_ARG_VALUE,ClassBuzzer.ERROR_CODE_ARG_VALUE);let Thi=_opt._PulseDur,Tlo=Math.floor(_opt._PulseDur*(1-_opt._Proportions)/_opt._Proportions),beep_count=2*_opt._NumRep,beep_flag=!0;analogWrite(this._BuzPin,.5,{freq:_opt._Freq});let beep_func=()=>{--beep_count,beep_count>0&&(beep_flag?(digitalWrite(this._BuzPin,beep_flag),setTimeout(beep_func,Tlo)):(analogWrite(this._BuzPin,.5,{freq:_opt._Freq}),setTimeout(beep_func,Thi)),beep_flag=!beep_flag)};setTimeout(beep_func,Thi)}}exports=ClassBuzzer;